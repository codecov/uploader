diff -u swish-e-2.4.7/src/compress.c swish-e-2.4.7/src/compress.c
--- swish-e-2.4.7/src/compress.c
+++ swish-e-2.4.7/src/compress.c
@@ -194,7 +194,7 @@
 
 /* same routine but this works with a memory forward buffer instead of file */
 /* it also increases the buffer pointer */
-int     uncompress2(unsigned char **buffer)
+int     swish_uncompress2(unsigned char **buffer)
 {
     int     _c;
     int     num = 0;
@@ -604,10 +604,10 @@
     else
         (*frequency) |= (*flag) & 15;   /* Binary 00001111 */
 
-    *filenum = uncompress2(&p);
+    *filenum = swish_uncompress2(&p);
 
     if(! (*frequency))
-        *frequency = uncompress2(&p);
+        *frequency = swish_uncompress2(&p);
 
     *buf = p;
 }
@@ -656,7 +656,7 @@
         }
 
         /* First position is always "as is" */
-        posdata[0] = (unsigned int)uncompress2(&p);
+        posdata[0] = (unsigned int)swish_uncompress2(&p);
 
         /* Check if positions where stored as two values per byte or the old "compress" style */
         if(flag & POS_4_BIT)
@@ -674,7 +674,7 @@
         {
             for (i = 1; i < frequency; i++)
             {
-                tmp = uncompress2(&p);
+                tmp = swish_uncompress2(&p);
                 posdata[i] = (unsigned int)tmp;
             }
         }
@@ -974,8 +974,8 @@
     src = worddata;
 
     /* Jump over tfrequency and get first metaID */
-    tfrequency = uncompress2(&src);     /* tfrequency */
-    metaID = uncompress2(&src);     /* metaID */
+    tfrequency = swish_uncompress2(&src);     /* tfrequency */
+    metaID = swish_uncompress2(&src);     /* metaID */
     dst = src;
 
     while(1)
@@ -1006,7 +1006,7 @@
             break;   /* End of worddata */
 
         /* Get next metaID */
-        metaID = uncompress2(&src);
+        metaID = swish_uncompress2(&src);
         dst = compress3(metaID,dst);
     }
     /* Adjust to new size */
only in patch2:
unchanged:
--- swish-e-2.4.7.orig/src/btree.c
+++ swish-e-2.4.7/src/btree.c
@@ -321,7 +321,7 @@
     {
         k = j + (i - j) / 2;
         key_k = BTREE_KeyData(pg,k);
-        key_len_k = uncompress2(&key_k);
+        key_len_k = swish_uncompress2(&key_k);
         isbigger = BTREE_CompareKeys(key,key_len,key_k,key_len_k);
         if (!isbigger)
             break;
@@ -358,7 +358,7 @@
         return 0;
 
     *found = BTREE_KeyData(pg,k);
-    *found_len = uncompress2(found);
+    *found_len = swish_uncompress2(found);
 
     /* Solaris do not like this. Use memcpy instead
     data_pointer = *(sw_off_t *) (*found + *found_len);
@@ -483,7 +483,7 @@
 
     /* Compute length of deleted key */
     del_key_start = q = BTREE_KeyData(pg,k);
-    q += uncompress2(&q);
+    q += swish_uncompress2(&q);
     q += sizeof(sw_off_t);
     del_key_end = q;
     del_entry_len = del_key_end - del_key_start;
@@ -610,7 +610,7 @@
     for(i = 0; i < n; i++)
     {
         key_data = start = BTREE_KeyData(pg, pg->n - n + i);
-        key_len = uncompress2(&key_data);
+        key_len = swish_uncompress2(&key_data);
 
         memcpy(p, start, (key_data - start) + key_len + sizeof(sw_off_t));
         tmp = p - new_pg->data;
@@ -628,7 +628,7 @@
     for(i = 0; i < (int)pg->n ; i++)
     {
         key_data = start = BTREE_KeyData(pg,i);
-        key_len = uncompress2(&key_data);
+        key_len = swish_uncompress2(&key_data);
 
         memmove(p, start, (key_data - start) + key_len + sizeof(sw_off_t));
         tmp = p - pg->data;
@@ -687,7 +687,7 @@
             if(!(pg->flags & BTREE_ROOT_NODE))
             {
                 key_data0 = BTREE_KeyData(pg,0);
-                key_len0 = uncompress2(&key_data0);
+                key_len0 = swish_uncompress2(&key_data0);
                 father_pg = BTREE_ReadPage(b,b->tree[level]);
                 BTREE_InsertInPage(b,father_pg, key_data0, key_len0, pg->page_number, level - 1, 1);
             }
@@ -711,7 +711,7 @@
     pg->next = new_pg->page_number;
 
     key_data0 = BTREE_KeyData(new_pg,0);
-    key_len0 = uncompress2(&key_data0);
+    key_len0 = swish_uncompress2(&key_data0);
 
             /* Let's see where to put the key */
     if(BTREE_CompareKeys(key, key_len, key_data0, key_len0) > 0)
@@ -740,10 +740,10 @@
         root_page = BTREE_NewPage(b,b->page_size, BTREE_ROOT_NODE);
 
         key_data0 = BTREE_KeyData(pg,0);
-        key_len0 = uncompress2(&key_data0);
+        key_len0 = swish_uncompress2(&key_data0);
         BTREE_AddKeyToPage(root_page, 0, key_data0, key_len0 , pg->page_number);
         key_data0 = BTREE_KeyData(new_pg,0);
-        key_len0 = uncompress2(&key_data0);
+        key_len0 = swish_uncompress2(&key_data0);
         BTREE_AddKeyToPage(root_page, 1, key_data0, key_len0, new_pg->page_number);
 
         b->root_page = root_page->page_number;
@@ -769,7 +769,7 @@
         BTREE_FreePage(b, pg);
 
         key_data0 = BTREE_KeyData(new_pg,0);
-        key_len0 = uncompress2(&key_data0);
+        key_len0 = swish_uncompress2(&key_data0);
         BTREE_FreePage(b, BTREE_Walk(b,key_data0,key_len0));
     }
     else
@@ -778,7 +778,7 @@
         BTREE_FreePage(b, pg);
 
         key_data0 = BTREE_KeyData(new_pg,0);
-        key_len0 = uncompress2(&key_data0);
+        key_len0 = swish_uncompress2(&key_data0);
     }
 
     if(!(new_pg->flags & BTREE_ROOT_NODE))
@@ -827,7 +827,7 @@
 
     key_k = BTREE_KeyData(pg,k);
 
-    key_len_k = uncompress2(&key_k);
+    key_len_k = swish_uncompress2(&key_k);
 
     if ( key_len_k != key_len)
         return -1;   /* Error - Should never happen */
@@ -903,7 +903,7 @@
         b->current_position = 0;
     }
     key_k = BTREE_KeyData(pg,b->current_position);
-    *found_len = key_len_k = uncompress2(&key_k);
+    *found_len = key_len_k = swish_uncompress2(&key_k);
     *found = emalloc(key_len_k);
     memcpy(*found,key_k,key_len_k);
     data_pointer = UNPACKFILEOFFSET(*(unsigned long *) (key_k + key_len_k));
only in patch2:
unchanged:
--- swish-e-2.4.7.orig/src/compress.h
+++ swish-e-2.4.7/src/compress.h
@@ -36,7 +36,7 @@
 unsigned char *compress3(int num, unsigned char *buffer);
 
 int uncompress1(FILE *fp, int (*f_getc)(FILE *fp));
-int uncompress2(unsigned char **buffer);
+int swish_uncompress2(unsigned char **buffer);
 
 
 unsigned long PACKLONG(unsigned long num);
only in patch2:
unchanged:
--- swish-e-2.4.7.orig/src/compress.loT
+++ swish-e-2.4.7/src/compress.loT
@@ -0,0 +1,7 @@
+# compress.lo - a libtool object file
+# Generated by ltmain.sh - GNU libtool 1.5.22 (1.1220.2.365 2005/12/18 22:14:06)
+#
+# Please DO NOT delete this file!
+# It is necessary for linking the library.
+
+# Name of the PIC object.
only in patch2:
unchanged:
--- swish-e-2.4.7.orig/src/db_native.c
+++ swish-e-2.4.7/src/db_native.c
@@ -1601,7 +1601,7 @@
 
     *worddata = buf = WORDDATA_Get(DB->worddata,wordID,data_size);
     /* Get saved_bytes and adjust data_size */
-    *saved_bytes = uncompress2(&buf);
+    *saved_bytes = swish_uncompress2(&buf);
     *data_size -= (buf - (*worddata));
     /* Remove saved_bytes from buffer
     ** We need to use memmove because data overlaps */
only in patch2:
unchanged:
--- swish-e-2.4.7.orig/src/db_read.c
+++ swish-e-2.4.7/src/db_read.c
@@ -308,24 +308,24 @@
     /* First clear out the default metanames */
     freeMetaEntries( header );
 
-    num_metanames = uncompress2(&s);
+    num_metanames = swish_uncompress2(&s);
 
     for (i = 0; i < num_metanames; i++)
     {
-        len = uncompress2(&s);
+        len = swish_uncompress2(&s);
         word = emalloc(len +1);
         memcpy(word,s,len); s += len;
         word[len] = '\0';
         /* Read metaID */
-        metaID = uncompress2(&s);
+        metaID = swish_uncompress2(&s);
         /* metaType was saved as metaType+1 */
-        metaType = uncompress2(&s);
+        metaType = swish_uncompress2(&s);
 
-        alias = uncompress2(&s) - 1;
+        alias = swish_uncompress2(&s) - 1;
 
-        sort_len = uncompress2(&s);
+        sort_len = swish_uncompress2(&s);
 
-        bias = uncompress2(&s) - RANK_BIAS_RANGE - 1;
+        bias = swish_uncompress2(&s) - RANK_BIAS_RANGE - 1;
 
 
         /* add the meta tag */
@@ -350,11 +350,11 @@
 
     unsigned char   *s = (unsigned char *)buffer;
 
-    num_words = uncompress2(&s);
+    num_words = swish_uncompress2(&s);
     
     for (i=0; i < num_words ; i++)   
     {
-        len = uncompress2(&s);
+        len = swish_uncompress2(&s);
         word = emalloc(len+1);
         memcpy(word,s,len); s += len;
         word[len] = '\0';
@@ -373,10 +373,10 @@
     int     tmp,i;
     unsigned char    *s = (unsigned char *)buffer;
 
-    tmp = uncompress2(&s);   /* Jump the number of elements */
+    tmp = swish_uncompress2(&s);   /* Jump the number of elements */
     for (i = 0; i < table_size; i++)
     {
-        tmp = uncompress2(&s); /* Gut all the elements */
+        tmp = swish_uncompress2(&s); /* Gut all the elements */
         table[i] = tmp - 1;
     }
 }
only in patch2:
unchanged:
--- swish-e-2.4.7.orig/src/db_write.c
+++ swish-e-2.4.7/src/db_write.c
@@ -239,7 +239,7 @@
         /* Jump pointer to next element */
         p = compressed_data + sizeof(LOCATION *);
 
-        metaID = uncompress2(&p);
+        metaID = swish_uncompress2(&p);
 
         memcpy((char *)&chunk_size,(char *)p,sizeof(chunk_size));
         p += sizeof(chunk_size);
@@ -386,12 +386,12 @@
     ** are presents to calculate a safe size for olddata with packedlongs */
     p1=olddata;
     num_metaids1=0;
-    uncompress2(&p1);   /* Jump tfreq */
+    swish_uncompress2(&p1);   /* Jump tfreq */
     do
     {
         num_metaids1++;
-        uncompress2(&p1);   /* Jump metaid */
-        metadata_length_1 = uncompress2(&p1);
+        swish_uncompress2(&p1);   /* Jump metaid */
+        metadata_length_1 = swish_uncompress2(&p1);
         p1 += metadata_length_1;
     } while ((p1 - olddata) != sz_olddata);
     maxtotsize = sw->Index->sz_worddata_buffer + (sz_olddata + num_metaids1 * sizeof(long));
@@ -417,17 +417,17 @@
     q = p = sw->Index->worddata_buffer;
 
     /* Now read tfrequency */
-    tfreq1 = uncompress2(&p1); /* tfrequency - number of files with this word */
-    tfreq2 = uncompress2(&p2); /* tfrequency - number of files with this word */
+    tfreq1 = swish_uncompress2(&p1); /* tfrequency - number of files with this word */
+    tfreq2 = swish_uncompress2(&p2); /* tfrequency - number of files with this word */
     /* Write tfrequency */
     p = compress3(tfreq1 + tfreq2, p);
 
     /* Now look for MetaIDs */
-    curmetaID_1 = uncompress2(&p1);
-    curmetaID_2 = uncompress2(&p2);
+    curmetaID_1 = swish_uncompress2(&p1);
+    curmetaID_2 = swish_uncompress2(&p2);
 
     /* Old data is compressed in a different more optimized schema */
-    metadata_length_1 = uncompress2(&p1);
+    metadata_length_1 = swish_uncompress2(&p1);
     nextposmetaname_1 = p1 - olddata + metadata_length_1;
 
     curmetanamepos_1 = p1 - olddata;
@@ -485,8 +485,8 @@
             /* Values for next metaID if exists */
             if(curmetaID_1)
             {
-                curmetaID_1 = uncompress2(&p1);  /* Next metaID */
-                metadata_length_1 = uncompress2(&p1);
+                curmetaID_1 = swish_uncompress2(&p1);  /* Next metaID */
+                metadata_length_1 = swish_uncompress2(&p1);
                 nextposmetaname_1 = p1 - olddata + metadata_length_1;
                 curmetanamepos_1 = p1 - olddata;
             }
@@ -522,7 +522,7 @@
             /* Values for next metaID if exists */
             if(curmetaID_2)
             {
-                curmetaID_2 = uncompress2(&p2);  /* Next metaID */
+                curmetaID_2 = swish_uncompress2(&p2);  /* Next metaID */
                 nextposmetaname_2 = UNPACKLONG2(p2);
                 p2 += sizeof(long);
                 curmetanamepos_2 = p2 - newdata;
@@ -539,8 +539,8 @@
             }
             else
             {
-                curmetaID_1 = uncompress2(&p1);  /* Next metaID */
-                metadata_length_1 = uncompress2(&p1);
+                curmetaID_1 = swish_uncompress2(&p1);  /* Next metaID */
+                metadata_length_1 = swish_uncompress2(&p1);
                 nextposmetaname_1 = p1 - olddata + metadata_length_1;
                 curmetanamepos_1 = p1 - olddata;
             }
@@ -556,7 +556,7 @@
             }
             else
             {
-                curmetaID_2 = uncompress2(&p2);  /* Next metaID */
+                curmetaID_2 = swish_uncompress2(&p2);  /* Next metaID */
                 nextposmetaname_2 = UNPACKLONG2(p2);
                 p2 += sizeof(long);
                 curmetanamepos_2 = p2 - newdata;
@@ -587,8 +587,8 @@
         }
         else
         {
-            curmetaID_1 = uncompress2(&p1);  /* Next metaID */
-            metadata_length_1 = uncompress2(&p1);
+            curmetaID_1 = swish_uncompress2(&p1);  /* Next metaID */
+            metadata_length_1 = swish_uncompress2(&p1);
             nextposmetaname_1 = p1 - olddata + metadata_length_1;
             curmetanamepos_1 = p1 - olddata;
         }
@@ -615,7 +615,7 @@
         }
         else
         {
-            curmetaID_2 = uncompress2(&p2);  /* Next metaID */
+            curmetaID_2 = swish_uncompress2(&p2);  /* Next metaID */
             nextposmetaname_2 = UNPACKLONG2(p2);
             p2+= sizeof(long);
             curmetanamepos_2= p2 - newdata;
only in patch2:
unchanged:
--- swish-e-2.4.7.orig/src/dump.c
+++ swish-e-2.4.7/src/dump.c
@@ -249,9 +249,9 @@
                 /* parse and print word's data */
                 s = worddata;
 
-                tmpval = uncompress2(&s);     /* tfrequency */
-                metaID = uncompress2(&s);     /* metaID */
-                metadata_length = uncompress2(&s);
+                tmpval = swish_uncompress2(&s);     /* tfrequency */
+                metaID = swish_uncompress2(&s);     /* metaID */
+                metadata_length = swish_uncompress2(&s);
 
                 filenum = 0;
                 start = s;
@@ -276,8 +276,8 @@
                     if ( metadata_length == (s - start))
                     {
                         filenum = 0;
-                        metaID = uncompress2(&s);
-                        metadata_length = uncompress2(&s);
+                        metaID = swish_uncompress2(&s);
+                        metadata_length = swish_uncompress2(&s);
                         start = s;
                     }
 
@@ -337,9 +337,9 @@
                 /* parse and print word's data */
                 s = worddata;
 
-                tmpval = uncompress2(&s);     /* tfrequency */
-                metaID = uncompress2(&s);     /* metaID */
-                metadata_length = uncompress2(&s);
+                tmpval = swish_uncompress2(&s);     /* tfrequency */
+                metaID = swish_uncompress2(&s);     /* metaID */
+                metadata_length = swish_uncompress2(&s);
 
                 filenum = 0;
                 start = s;
@@ -437,8 +437,8 @@
                     if ( metadata_length == (s - start))
                     {
                         filenum = 0;
-                        metaID = uncompress2(&s);
-                        metadata_length = uncompress2(&s);
+                        metaID = swish_uncompress2(&s);
+                        metadata_length = swish_uncompress2(&s);
                         start = s;
                     }
                 }
only in patch2:
unchanged:
--- swish-e-2.4.7.orig/src/index.c
+++ swish-e-2.4.7/src/index.c
@@ -1748,7 +1748,7 @@
                  /* Jump pointer to next element */
                  p = compressed_data + sizeof(LOCATION *);
 
-                 metaID = uncompress2(&p);
+                 metaID = swish_uncompress2(&p);
 
                  memcpy((char *)&chunk_size,(char *)p,sizeof(chunk_size));
                  p += sizeof(chunk_size);
@@ -1842,8 +1842,8 @@
 
     p = worddata;
 
-    tmpval = uncompress2(&p);     /* tfrequency */
-    metaID = uncompress2(&p);     /* metaID */
+    tmpval = swish_uncompress2(&p);     /* tfrequency */
+    metaID = swish_uncompress2(&p);     /* metaID */
     r_nextposmeta =  UNPACKLONG2(p); 
     w_nextposmeta = p;
     p += sizeof(long);
@@ -1907,7 +1907,7 @@
             if(q != p)
                 PACKLONG2(q - worddata, w_nextposmeta);
 
-            metaID = uncompress2(&p);
+            metaID = swish_uncompress2(&p);
             q = compress3(metaID,q);
 
             r_nextposmeta = UNPACKLONG2(p); 
@@ -2035,7 +2035,7 @@
         /* Jump next offset */
         compressed_data += sizeof(LOCATION *);
 
-        metaID = uncompress2(&compressed_data);
+        metaID = swish_uncompress2(&compressed_data);
         uncompress_location_values(&compressed_data,&flag,&filenum,&frequency);
         pi[0] = metaID;
         pi[1] = filenum;
@@ -2784,7 +2784,7 @@
     for(tprev =NULL, tloc = e->allLocationList; tloc; )
     {
         tp = (unsigned char *)tloc + sizeof(void *);
-        tmp = uncompress2(&tp); /* Read metaID */
+        tmp = swish_uncompress2(&tp); /* Read metaID */
         if(tmp > metaID)
              break;
         tprev = tloc;
@@ -2854,7 +2854,7 @@
         p += sizeof(LOCATION *);
 
         /* get metaID of LOCATION */
-        metaID = uncompress2(&p);
+        metaID = swish_uncompress2(&p);
 
         /* Check for new metaID */
         if(metaID != curmetaID)
@@ -3149,7 +3149,7 @@
         /* Jump fileoffset */
         compressed_data += sizeof(LOCATION *);
 
-        metaID = uncompress2(&compressed_data);
+        metaID = swish_uncompress2(&compressed_data);
         pi[0] = metaID;
         pi[1] = i-k;
         ptmp2 += 2 * sizeof(int);
only in patch2:
unchanged:
--- swish-e-2.4.7.orig/src/merge.c
+++ swish-e-2.4.7/src/merge.c
@@ -221,12 +221,12 @@
 
                         /* Now, parse word's data */
                         s = worddata;
-                        tmpval = uncompress2(&s);     /* tfrequency */
-                        metaID = uncompress2(&s);     /* metaID */
+                        tmpval = swish_uncompress2(&s);     /* tfrequency */
+                        metaID = swish_uncompress2(&s);     /* metaID */
 
                         if (metaID)
                         {
-                            metadata_length = uncompress2(&s);
+                            metadata_length = swish_uncompress2(&s);
                         }
 
                         filenum = 0;
@@ -274,8 +274,8 @@
                             if ( metadata_length == (s - start))
                             {
                                 filenum = 0;
-                                metaID = uncompress2(&s);
-                                metadata_length = uncompress2(&s);
+                                metaID = swish_uncompress2(&s);
+                                metadata_length = swish_uncompress2(&s);
                                 start = s;
                             }
                         }
only in patch2:
unchanged:
--- swish-e-2.4.7.orig/src/result_sort.c
+++ swish-e-2.4.7/src/result_sort.c
@@ -260,7 +260,7 @@
 
         /* Unpack / decompress the numbers */
         for (j = 0; j < indexf->header.totalfiles; j++)
-            m->sorted_data[j] = uncompress2(&s);
+            m->sorted_data[j] = swish_uncompress2(&s);
 
         efree(buffer);
     }
only in patch2:
unchanged:
--- swish-e-2.4.7.orig/src/search.c
+++ swish-e-2.4.7/src/search.c
@@ -1736,14 +1736,14 @@
         // buffer structure = <tfreq><metaID><delta to next meta>
 
         /* Get the data of the word */
-        tfrequency = uncompress2(&s); /* tfrequency - number of files with this word */
+        tfrequency = swish_uncompress2(&s); /* tfrequency - number of files with this word */
 
         /* Now look for a correct Metaname */
-        curmetaID = uncompress2(&s);
+        curmetaID = swish_uncompress2(&s);
 
         while (curmetaID)
         {
-            metadata_length = uncompress2(&s);
+            metadata_length = swish_uncompress2(&s);
             
             if (curmetaID >= metaID)
                 break;
@@ -1755,7 +1755,7 @@
             if(s == (buffer + sz_buffer))
                 break; /* exit if no more meta data */
 
-            curmetaID = uncompress2(&s);
+            curmetaID = swish_uncompress2(&s);
         }
 
         if (curmetaID == metaID) /* found a matching meta value */
