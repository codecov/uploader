diff --git a/tests/acceptance/test_checkbox.py b/tests/acceptance/test_checkbox.py
index fd84a7b..c0b1ad4 100644
--- a/tests/acceptance/test_checkbox.py
+++ b/tests/acceptance/test_checkbox.py
@@ -5,7 +5,7 @@ from readchar import key
 
 class CheckTest(unittest.TestCase):
     def setUp(self):
-        self.sut = pexpect.spawn('python examples/checkbox.py')
+        self.sut = pexpect.spawn('python3 examples/checkbox.py')
         self.sut.expect('History.*', timeout=1)
 
     def test_default_input(self):
@@ -67,7 +67,7 @@ class CheckTest(unittest.TestCase):
 
 class CheckWithTaggedValuesTest(unittest.TestCase):
     def setUp(self):
-        self.sut = pexpect.spawn('python examples/checkbox_tagged.py')
+        self.sut = pexpect.spawn('python3 examples/checkbox_tagged.py')
         self.sut.expect('History.*', timeout=1)
 
     def test_default_selection(self):
diff --git a/tests/acceptance/test_list.py b/tests/acceptance/test_list.py
index 2aca650..82886e8 100644
--- a/tests/acceptance/test_list.py
+++ b/tests/acceptance/test_list.py
@@ -5,7 +5,7 @@ from readchar import key
 
 class ListTest(unittest.TestCase):
     def setUp(self):
-        self.sut = pexpect.spawn('python examples/list.py')
+        self.sut = pexpect.spawn('python3 examples/list.py')
         self.sut.expect('Micro.*', timeout=1)
 
     def test_default_input(self):
@@ -34,7 +34,7 @@ class ListTest(unittest.TestCase):
 
 class ListCarouselTest(unittest.TestCase):
     def setUp(self):
-        self.sut = pexpect.spawn('python examples/list_carousel.py')
+        self.sut = pexpect.spawn('python3 examples/list_carousel.py')
         self.sut.expect('Standard.*', timeout=1)
         import sys
         self.sut.logfile = sys.stdout
@@ -57,7 +57,7 @@ class ListCarouselTest(unittest.TestCase):
 
 class ListTaggedTest(unittest.TestCase):
     def setUp(self):
-        self.sut = pexpect.spawn('python examples/list_tagged.py')
+        self.sut = pexpect.spawn('python3 examples/list_tagged.py')
         self.sut.expect('Micro.*', timeout=1)
 
     def test_default_input(self):
diff --git a/tests/acceptance/test_password.py b/tests/acceptance/test_password.py
index 6f9c102..0717222 100644
--- a/tests/acceptance/test_password.py
+++ b/tests/acceptance/test_password.py
@@ -5,7 +5,7 @@ from readchar import key
 
 class PasswordTest(unittest.TestCase):
     def setUp(self):
-        self.sut = pexpect.spawn('python examples/password.py')
+        self.sut = pexpect.spawn('python3 examples/password.py')
 
     def test_default_input(self):
         self.sut.expect(".*What's.*", timeout=1)
diff --git a/tests/acceptance/test_pre_answers.py b/tests/acceptance/test_pre_answers.py
index c9d84bc..5b4562a 100644
--- a/tests/acceptance/test_pre_answers.py
+++ b/tests/acceptance/test_pre_answers.py
@@ -14,7 +14,7 @@ expected_result = r"""\
 
 class PreAnswersTest(unittest.TestCase):
     def setUp(self):
-        self.sut = pexpect.spawn('python examples/pre_answers.py')
+        self.sut = pexpect.spawn('python3 examples/pre_answers.py')
 
     def test_minimal_input(self):
         # user
diff --git a/tests/acceptance/test_shortcuts.py b/tests/acceptance/test_shortcuts.py
index e6bf784..f4512de 100644
--- a/tests/acceptance/test_shortcuts.py
+++ b/tests/acceptance/test_shortcuts.py
@@ -5,7 +5,7 @@ from readchar import key
 
 class ShortcutsTest(unittest.TestCase):
     def setUp(self):
-        self.sut = pexpect.spawn('python examples/shortcuts.py')
+        self.sut = pexpect.spawn('python3 examples/shortcuts.py')
 
     def set_username(self, name='foo'):
         self.sut.expect("Enter your username", timeout=1)
diff --git a/tests/acceptance/test_text.py b/tests/acceptance/test_text.py
index 1eb3def..9eb47a7 100644
--- a/tests/acceptance/test_text.py
+++ b/tests/acceptance/test_text.py
@@ -6,7 +6,7 @@ from readchar import key
 
 class TextTest(unittest.TestCase):
     def setUp(self):
-        self.sut = pexpect.spawn('python examples/text.py')
+        self.sut = pexpect.spawn('python3 examples/text.py')
 
     def set_name(self, name='foo'):
         self.sut.expect("What's", timeout=1)
