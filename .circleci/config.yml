# Javascript Node CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-javascript/ for more details
#
version: 2.1

orbs:
  win: circleci/windows@2.2.0

jobs:
  build-linux-and-osx:
    docker:
      # specify the version you desire here
      - image: circleci/node:10.16.3

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/mongo:3.4.4

    working_directory: ~/repo

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "npm-shrinkwrap.json" }}

      - run: npm install

      - save_cache:
          paths:
            - node_modules
          key: v1-dependencies-{{ checksum "npm-shrinkwrap.json" }}

      # run tests!
      - run: make test

      # run tests!
      - run: make build

      # Persist the specified paths (workspace/echo-output) into the workspace for use in downstream job.
      - persist_to_workspace:
          # Must be an absolute path, or relative path from working_directory. This is a directory on the container which is
          # taken to be the root directory of the workspace.
          root: .
          # Must be relative path from root
          paths:
            - out
            - coverage
            - package.json

  build-alpine:
    docker:
      # specify the version you desire here
      - image: alpine:3.11.6

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/mongo:3.4.4

    working_directory: ~/repo

    steps:
      - run:
        name: Setup image
        command: |
          apk update
          apk add git python3 openssh g++ make openssl linux-headers python2
    - checkout
    - attach_workspace:
      # Must be absolute path or relative path from working_directory
      at: .
    - run:
        name: Clone nodejs repo
        command: |
          git clone https://github.com/nodejs/node.git
          cd node && git fetch --all --tags
          cd node && git checkout tags/v12.16.1 -b build

    - run:
        name: Apply patch
        command: cd node && git apply ../patches/node.v12.16.1.cpp.patch
    
    - run:
        name: Configure build
        command: cd node && ./configure --fully-static

    - run:
        name: Build static nodejs binary
        command: cd node && make -j4

    # Persist the specified paths (workspace/echo-output) into the workspace for use in downstream job.
    - persist_to_workspace:
        # Must be an absolute path, or relative path from working_directory. This is a directory on the container which is
        # taken to be the root directory of the workspace.
        root: .
        # Must be relative path from root
        paths:
          - node/out/Release/node
          - out
          - coverage
          - package.json

  build-windows:
    executor: win/default
    steps:
      - checkout
      - attach_workspace:
          # Must be absolute path or relative path from working_directory
          at: .
      - run:
          name: Build Windows Binary
          command: |
            npm ci
            npm run build-windows

      - persist_to_workspace:
          root: .
          paths:
            - out
            - coverage

  test-linux:
    docker:
      # specify the version you desire here
      - image: circleci/node:10.16.3
    steps:
      - checkout
      - attach_workspace:
          # Must be absolute path or relative path from working_directory
          at: .
      - run:
          name: Run Linux binary -f (dry run)
          command: |
            out/codecov-linux -f /home/circleci/project/coverage/cobertura-coverage.xml -F linux -d -Z >> output_linux.txt
      - run:
          name: Run Linux binary auto-detect (dry run)
          command: |
            out/codecov-linux -F linux -d -Z >> output_linux.txt
      - run:
          name: Run Linux binary (upload)
          command: |
            out/codecov-linux -F linux -Z

      - persist_to_workspace:
          root: .
          paths:
            - output_linux.txt

  test-linux-without-git:
    docker:
      - image: circleci/node:10.16.3
    steps:
      - attach_workspace:
          # TODO: Determine why we use the cwd on Linex and not on other operating systems.
          at: .
      - run:
          name: Run Linux binary (dry run)
          command: |
            out/codecov-linux -F linux-without-git -d -Z > output_linux_without_git.txt
      - run:
          name: Run Linux binary (upload)
          command: |
            out/codecov-linux -F linux-without-git -Z

      - persist_to_workspace:
          root: .
          paths:
            - output_linux.txt

  test-macos:
    macos: 
      xcode: "10.0.0" 
    steps: 
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Run MacOS binary -f (dry-run)
          command: |
            out/codecov-macos -f /Users/distiller/project/coverage/cobertura-coverage.xml -F macos -d -Z >> output_osx.txt
      - run:
          name: Run MacOS binary auto-detect (dry-run)
          command: |
            out/codecov-macos -F macos -d -Z >> output_osx.txt
      - run:
          name: Run MacOS binary (upload)
          command: |
            out/codecov-macos -F macos -Z

      - persist_to_workspace:
          root: .
          paths:
            - output_osx.txt

  test-macos-without-git:
    macos: 
      xcode: "10.0.0" 
    steps: 
      - attach_workspace:
          at: .
      - run:
          name: Run MacOS binary (dry-run)
          command: |
            out/codecov-macos -F macos-without-git -d > output_osx_without_git.txt
      - run:
          name: Run MacOS binary (upload)
          command: |
            out/codecov-macos -F macos-without-git

      - persist_to_workspace:
          root: .
          paths:
            - output_osx.txt

  test-windows:
    executor: win/default
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Run Windows binary -f (dry-run)
          command: |
            dir C:\Users\circleci\project\coverage\
            attrib C:\Users\circleci\project\coverage\cobertura-coverage.xml
            .\out\codecov.exe -f C:\Users\circleci\project\coverage\cobertura-coverage.xml -F windows -d -Z >> output_win.txt
          shell: cmd.exe
      - run:
          name: Run Windows binary auto-detect (dry-run)
          command: |
            .\out\codecov.exe -F windows -d -Z >> output_win.txt
          shell: cmd.exe
      - run:
          name: Run Windows binary (upload)
          command: |
            .\out\codecov.exe -F windows -Z
          shell: cmd.exe

      - persist_to_workspace:
          root: .
          paths:
            - output_win.txt

  test-windows-without-git:
    executor: win/default
    steps:
      - attach_workspace:
          # Must be absolute path or relative path from working_directory
          at: .
      - run:
          name: Run Windows binary (dry-run)
          command: |
            .\out\codecov.exe -F windows-without-git -d > output_win_without_git.txt
          shell: cmd.exe
      - run:
          name: Run Windows binary (upload)
          command: |
            .\out\codecov.exe -F windows-without-git
          shell: cmd.exe

      - persist_to_workspace:
          root: .
          paths:
            - output_win_without_git.txt

  review:
    docker:
      - image: circleci/node:10.16.3
    steps:
      - attach_workspace:
          at: .
      - store_artifacts:
        path: node/out/Release/node
      - store_artifacts:
          path: coverage
      - store_artifacts:
          path: out
      - store_artifacts:
          path: output_linux.txt
      - store_artifacts:
          path: output_linux_without_git.txt
      - store_artifacts:
          path: output_osx.txt
      - store_artifacts:
          path: output_osx_without_git.txt
      - store_artifacts:
          path: output_win.txt
      - store_artifacts:
          path: output_win_without_git.txt     

# TODO: add test runs for each binary outside of a git project

  deploy:
    docker:
      - image: circleci/node:10.16.3
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Install GHR
          command: >
            wget
            https://github.com/tcnksm/ghr/releases/download/v0.5.4/ghr_v0.5.4_linux_amd64.zip

            unzip ghr_v0.5.4_linux_amd64.zip
      - run:
          name: Make binaries executable
          command: |
            chmod +x out/*
      - run:
          name: Package
          command: >
            RELEASE_TAG=v$(cat package.json | jq --raw-output
            .version)_$CIRCLE_BUILD_NUM

            echo $RELEASE_TAG

            ./ghr -u codecov -r uploader --replace $RELEASE_TAG out

workflows:
  version: 2

  "Build and Test":
    jobs:
      - build-linux-and-osx
      - build-windows:
          requires:
            - build-linux-and-osx
      - test-linux:
          requires:
            - build-linux-and-osx
      - test-linux-without-git:
          requires:
            - test-linux
      - test-macos:
          requires:
            - build-linux-and-osx
      - test-macos-without-git:
          requires:
            - test-macos
      - test-windows:
          requires:
            - build-windows
      - test-windows-without-git:
          requires:
            - test-windows
      - review:
          requires:
            - build-alpine
            - test-linux-without-git
            - test-macos-without-git
            - test-windows-without-git
      - deploy:
          requires:
            - review
          filters:
            branches:
              only: master
