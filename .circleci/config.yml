version: 2.1

orbs:
  win: circleci/windows@5.0.0
  node: circleci/node@5.3.0

jobs:
  build-aarch64:
    machine:
      image: default
    resource_class: arm.medium

    working_directory: ~/repo

    steps:
      - checkout
      - attach_workspace:
          at: .

      - node/install:
          node-version: '18.20.4'

      - run: npm ci

      - run: |
          make test
          mkdir -p coverage-aarch64
          cp -r coverage/* coverage-aarch64/

      - run: make build_aarch64

      - persist_to_workspace:
          root: .
          paths:
            - out/codecov-aarch64
            - coverage-aarch64

  build-linux:
    docker:
      - image: cimg/node:18.20.4@sha256:47889a018de75a976d77397f75bce3041c6afda2d798fde68dba3acc9da7758c

    working_directory: ~/repo

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v2-dependencies-{{ checksum "npm-shrinkwrap.json" }}

      - run: npm install

      - save_cache:
          paths:
            - node_modules
          key: v2-dependencies-{{ checksum "npm-shrinkwrap.json" }}

      - run: make test

      - run: make build

      - persist_to_workspace:
          root: .
          paths:
            - out
            - coverage
            - package.json
            - vendor

  build-macos:
    macos:
      xcode: '15.3.0'
    resource_class: macos.m1.medium.gen1

    working_directory: ~/repo

    steps:
      - checkout
      - node/install:
          node-version: '18.20.3'
      - run: npm install
      - run: make test
      - run: make build_macos

      - persist_to_workspace:
          root: .
          paths:
            - out/codecov-macos
            - coverage-macos

  build-alpine:
    docker:
      - image: alpine:3.20.3@sha256:beefdbd8a1da6d2915566fde36db9db0b524eb737fc57cd1367effd16dc0d06d

    working_directory: ~/repo

    steps:
      - checkout
      - attach_workspace:
          at: .

      - run:
          name: Download prebuilt static node binary
          command: |
            apk add wget coreutils make
            NODE_RELEASE=node.v16.2.0_b57a0d7c9ecba551879997ac44bba3c9d9443df5
            wget https://github.com/codecov/node-static-alpine/releases/download/$NODE_RELEASE/node
            wget https://github.com/codecov/node-static-alpine/releases/download/$NODE_RELEASE/SHA1SUM
            wget https://github.com/codecov/node-static-alpine/releases/download/$NODE_RELEASE/SHA256SUM
            wget https://github.com/codecov/node-static-alpine/releases/download/$NODE_RELEASE/SHA512SUM
            for i in 1 256 512; do "sha${i}sum" -c "SHA${i}SUM"; done
      - run:
          name: Confirm that alpine node binary is static
          command: |
            apk add file
            (file node | grep 'static') || exit ${?}

      - run:
          name: Create pkg-cache directory and copy static NodeJS binary
          command: |
            mkdir -p ~/.pkg-cache/v2.6
            cp node /root/.pkg-cache/v2.6/fetched-v14.0.0-alpine-x64

      - run:
          name: Remove downloaded binary and run tests
          command: |
            rm -rf node
            apk add npm git
            npm ci
            npm test
            mkdir -p coverage-alpine
            cp -r coverage/* coverage-alpine/

      - run:
          name: Build uploader binary on alpine
          command: make build_alpine

      - persist_to_workspace:
          root: .
          paths:
            - out/codecov-alpine
            - coverage-alpine

  test-alpine:
    docker:
      - image: alpine:3.20.3@sha256:beefdbd8a1da6d2915566fde36db9db0b524eb737fc57cd1367effd16dc0d06d
    steps:
      - run:
          name: Install git
          command: |
            apk update
            apk add git
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Remove test coverage files
          command: rm -rf *.coverage.txt coverage-report-test.json test/fixtures || echo
      - run:
          name: Run Alpine binary -f (dry run)
          command: |
            NODE_DEBUG=vm out/codecov-alpine -v -f /root/project/coverage-alpine/cobertura-coverage.xml -F alpine -d -Z -e CIRCLE_BRANCH >> output_alpine.txt
      - run:
          name: Run Alpine binary auto-detect (dry run)
          command: |
            out/codecov-alpine -F alpine -v -d -Z -e CIRCLE_BRANCH >> output_alpine.txt
      - run:
          name: Run Alpine binary (upload)
          command: |
            out/codecov-alpine -F alpine -v -Z -e CIRCLE_BRANCH

      - store_artifacts:
          path: output_alpine.txt

      - persist_to_workspace:
          root: .
          paths:
            - coverage-alpine
            - output_alpine.txt

  test-alpine-proxy:
    docker:
      - image: alpine:3.20.3@sha256:beefdbd8a1da6d2915566fde36db9db0b524eb737fc57cd1367effd16dc0d06d
    steps:
      - run:
          name: Install git
          command: |
            apk update
            apk add git squid
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Start Squid
          command: squid
      - run:
          name: Remove test coverage files
          command: rm -rf *.coverage.txt coverage-report-test.json test/fixtures || echo
      - run:
          name: Run Alpine binary auto-detect (dry run)
          command: |
            out/codecov-alpine -U http://localhost:3128 -F alpine-proxy -v -d -Z -e CIRCLE_BRANCH >> output_alpine_proxy.txt
      - run:
          name: Run Alpine binary (upload)
          command: |
            out/codecov-alpine -U http://localhost:3128 -F alpine-proxy -v -Z -e CIRCLE_BRANCH

      - store_artifacts:
          path: output_alpine_proxy.txt

      - persist_to_workspace:
          root: .
          paths:
            - output_alpine_proxy.txt

  test-alpine-without-git:
    docker:
      - image: alpine:3.20.3@sha256:beefdbd8a1da6d2915566fde36db9db0b524eb737fc57cd1367effd16dc0d06d
    steps:
      - run:
          name: Install git
          command: |
            apk update
            apk add git
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Remove .git directory
          command: rm -rf .git
      - run:
          name: Remove test coverage files
          command: rm -rf *.coverage.txt coverage-report-test.json test/fixtures || echo
      - run:
          name: Run Alpine binary -f (dry run)
          command: |
            NODE_DEBUG=vm out/codecov-alpine -v -f /root/project/coverage-alpine/cobertura-coverage.xml -F alpine -d -Z -e CIRCLE_BRANCH >> output_alpine_without_git.txt
      - run:
          name: Run Alpine binary auto-detect (dry run)
          command: |
            out/codecov-alpine -F alpine-without-git -v -d -Z -e CIRCLE_BRANCH >> output_alpine_without_git.txt
      - run:
          name: Run Alpine binary (upload)
          command: |
            out/codecov-alpine -F alpine-without-git -v -Z -e CIRCLE_BRANCH

      - store_artifacts:
          path: output_alpine.txt

      - persist_to_workspace:
          root: .
          paths:
            - output_alpine_without_git.txt

  test-linux:
    docker:
      - image: cimg/node:18.20.4@sha256:47889a018de75a976d77397f75bce3041c6afda2d798fde68dba3acc9da7758c
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Confirm that linux uploader binary is static
          command: |
            (file out/codecov-linux | grep 'static') || exit ${?}
      - run:
          name: Remove test coverage files
          command: rm -rf *.coverage.txt coverage-report-test.json test/fixtures || echo
      - run:
          name: Run Linux binary -f (dry run)
          command: |
            out/codecov-linux -f /home/circleci/project/coverage/cobertura-coverage.xml -F linux -d -Z -v -e CIRCLE_BRANCH >> output_linux.txt
      - run:
          name: Run Linux binary auto-detect (dry run)
          command: |
            out/codecov-linux -F linux -d -Z -e CIRCLE_BRANCH >> output_linux.txt
      - run:
          name: Run Linux binary (upload)
          command: |
            out/codecov-linux -F linux -Z -e CIRCLE_BRANCH
            out/codecov-linux -F "-linux" -Z -e CIRCLE_BRANCH

      - persist_to_workspace:
          root: .
          paths:
            - output_linux.txt

  test-linux-without-git:
    docker:
      - image: cimg/node:18.20.4@sha256:47889a018de75a976d77397f75bce3041c6afda2d798fde68dba3acc9da7758c
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Remove .git directory
          command: rm -rf .git
      - run:
          name: Remove test coverage files
          command: rm -rf *.coverage.txt coverage-report-test.json test/fixtures || echo
      - run:
          name: Run Linux binary (dry run)
          command: |
            out/codecov-linux -F linux-without-git -d -Z -e CIRCLE_BRANCH > output_linux_without_git.txt
      - run:
          name: Run Linux binary (upload)
          command: |
            out/codecov-linux -F linux-without-git -Z -e CIRCLE_BRANCH

      - persist_to_workspace:
          root: .
          paths:
            - output_linux_without_git.txt

  test-aarch64:
    machine:
      image: default
    resource_class: arm.medium
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Confirm that aarch64 uploader binary is static
          command: |
            file out/codecov-aarch64
      - run:
          name: Confirm that aarch64 uploader binary is static
          command: |
            (file out/codecov-aarch64 | grep 'static') || exit ${?}
      - run:
          name: Remove test coverage files
          command: rm -rf *.coverage.txt coverage-report-test.json test/fixtures || echo
      - run:
          name: Run aarch64 binary -f (dry run)
          command: |
            out/codecov-aarch64 -f /home/circleci/project/coverage/cobertura-coverage.xml -F aarch64 -d -Z -v -e CIRCLE_BRANCH >> output_aarch64.txt
      - run:
          name: Run aarch64 binary auto-detect (dry run)
          command: |
            out/codecov-aarch64 -F aarch64 -d -Z -e CIRCLE_BRANCH >> output_aarch64.txt
      - run:
          name: Run aarch64 binary (upload)
          command: |
            out/codecov-aarch64 -F aarch64 -Z -e CIRCLE_BRANCH
            out/codecov-aarch64 -F "-aarch64" -Z -e CIRCLE_BRANCH

      - persist_to_workspace:
          root: .
          paths:
            - output_aarch64.txt

  test-aarch64-without-git:
    machine:
      image: default
    resource_class: arm.medium
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Remove .git directory
          command: rm -rf .git
      - run:
          name: Remove test coverage files
          command: rm -rf *.coverage.txt coverage-report-test.json test/fixtures || echo
      - run:
          name: Run Linux binary (dry run)
          command: |
            out/codecov-aarch64 -F aarch64-without-git -d -Z -e CIRCLE_BRANCH > output_aarch64_without_git.txt
      - run:
          name: Run Linux binary (upload)
          command: |
            out/codecov-aarch64 -F aarch64-without-git -Z -e CIRCLE_BRANCH

      - persist_to_workspace:
          root: .
          paths:
            - output_aarch64_without_git.txt

  test-macos:
    macos:
      xcode: '15.3.0'
    resource_class: macos.m1.medium.gen1
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Remove test coverage files
          command: rm -rf *.coverage.txt coverage-report-test.json test/fixtures || echo
      - run:
          name: Run MacOS binary -f (dry-run)
          command: |
            ./out/codecov-macos -f /Users/distiller/project/coverage/cobertura-coverage.xml -F macos -d -Z -v -e CIRCLE_BRANCH >> output_osx.txt
      - run:
          name: Run MacOS binary auto-detect (dry-run)
          command: |
            ./out/codecov-macos -F macos -v -d -Z -e CIRCLE_BRANCH >> output_osx.txt
      - run:
          name: Run MacOS binary (upload)
          command: |
            ./out/codecov-macos -F macos -v -Z -e CIRCLE_BRANCH

      - persist_to_workspace:
          root: .
          paths:
            - output_osx.txt

  test-macos-without-git:
    macos:
      xcode: '15.3.0'
    resource_class: macos.m1.medium.gen1
    steps:
      - checkout
      - run:
          name: Remove .git directory
          command: rm -rf .git
      - attach_workspace:
          at: .
      - run:
          name: Remove test coverage files
          command: rm -rf *.coverage.txt coverage-report-test.json test/fixtures || echo
      - run:
          name: Run MacOS binary (dry-run)
          command: |
            ./out/codecov-macos -F macos-without-git -d > output_osx_without_git.txt
      - run:
          name: Run MacOS binary (upload)
          command: |
            ./out/codecov-macos -F macos-without-git

      - persist_to_workspace:
          root: .
          paths:
            - output_osx_without_git.txt

  build-windows:
    executor: win/default
    steps:
      - checkout
      - attach_workspace:
          at: .
      # https://superuser.com/a/1620000/54442
      - run:
          name: Install and set Node 16.x
          command: |
            $ErrorActionPreference="Stop"
            nvm arch
            nvm install 16 all
            nvm use 16.20.2
      - run:
          name: Build Windows Binary
          command: |
            $ErrorActionPreference="Stop"
            node --version
            npm ci; npm test; npm run build; npm run build-windows

      - persist_to_workspace:
          root: .
          paths:
            - out
            - coverage

  test-windows:
    executor: win/default
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Remove test coverage files
          command: |
            Remove-Item -Recurse -Force *.coverage.txt;  echo "ok"
            Remove-Item -Recurse -Force coverage-report-test.json; echo "ok"
            Remove-Item -Recurse -Force test/fixtures; echo "ok"
      - run:
          name: Run Windows binary -f (dry-run)
          command: |
            dir .
            attrib .\coverage\cobertura-coveage.xml
            .\out\codecov.exe -f .\coverage\cobertura-coverage.xml -F windows -d -Z -v -e CIRCLE_BRANCH >> output_win.txt
          shell: cmd.exe
      - run:
          name: Run Windows binary auto-detect (dry-run)
          command: |
            .\out\codecov.exe -F windows -v -d -Z -e CIRCLE_BRANCH >> output_win.txt
          shell: cmd.exe
      - run:
          name: Run Windows binary (upload)
          command: |
            .\out\codecov.exe -F windows -v -Z -e CIRCLE_BRANCH
          shell: cmd.exe

      - persist_to_workspace:
          root: .
          paths:
            - output_win.txt

  test-windows-without-git:
    executor: win/default
    steps:
      - checkout
      - run:
          name: Remove .git directory
          command: del -Recurse -Force .git
      - attach_workspace:
          at: .
      - run:
          name: Remove test coverage files
          command: |
            Remove-Item -Recurse -Force *.coverage.txt; echo "ok"
            Remove-Item -Recurse -Force coverage-report-test.json; echo "ok"
            Remove-Item -Recurse -Force test/fixtures; echo "ok"
      - run:
          name: Run Windows binary (dry-run)
          command: |
            .\out\codecov.exe -F windows-without-git -d > output_win_without_git.txt
          shell: cmd.exe
      - run:
          name: Run Windows binary (upload)
          command: |
            .\out\codecov.exe -F windows-without-git
          shell: cmd.exe

      - persist_to_workspace:
          root: .
          paths:
            - output_win_without_git.txt

  review:
    docker:
      - image: cimg/node:18.20.4@sha256:47889a018de75a976d77397f75bce3041c6afda2d798fde68dba3acc9da7758c
    steps:
      - attach_workspace:
          at: .
      - store_artifacts:
          path: node/out/Release/node
      - store_artifacts:
          path: coverage
      - store_artifacts:
          path: coverage-alpine
      - store_artifacts:
          path: out
      - store_artifacts:
          path: output_linux.txt
      - store_artifacts:
          path: output_alpine.txt
      - store_artifacts:
          path: output_alpine_proxy.txt
      - store_artifacts:
          path: output_alpine_without_git.txt
      - store_artifacts:
          path: output_linux_without_git.txt
      - store_artifacts:
          path: output_aarch64.txt
      - store_artifacts:
          path: output_aarch64_without_git.txt
      - store_artifacts:
          path: output_osx.txt
      - store_artifacts:
          path: output_osx_without_git.txt
      - store_artifacts:
          path: output_win.txt
      - store_artifacts:
          path: output_win_without_git.txt

  # TODO: add test runs for each binary outside of a git project

  deploy:
    docker:
      - image: cimg/node:18.20.4@sha256:47889a018de75a976d77397f75bce3041c6afda2d798fde68dba3acc9da7758c
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Make binaries executable
          command: |
            chmod +x out/*
      - run:
          name: Package
          command: >
            RELEASE_TAG=v$(cat package.json | jq --raw-output
            .version)

            echo $RELEASE_TAG

            echo $RELEASE_TAG > release_tag

            vendor/ghr -u codecov -r uploader $RELEASE_TAG out

      - persist_to_workspace:
          root: .
          paths:
            - release_tag
  release:
    docker:
      - image: google/cloud-sdk:496.0.0-slim@sha256:536b160424e8b4220e7c50b1bd037167c6c001220ef168591d7e0a47794b6a7f
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Push release tag to pubsub
          command: |
            RELEASE_TAG=$(cat release_tag)
            echo $RELEASE_TAG
            echo "$GCLOUD_UPLOADER_SERVICE_KEY" > service.json
            gcloud auth activate-service-account --key-file service.json
            gcloud --quiet config set project $GCLOUD_UPLOADER_PROJECT_ID
            gcloud pubsub topics publish $GCLOUD_UPLOADER_PUBSUB_TOPIC --message '{"release":"'"$RELEASE_TAG"'", "latest":true}'

  standards-coverage-comparison:
    machine:
      image: default
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Clone Autotest and Start Acceptance Testing Containers
          command: |
            cd ..
            git clone --depth 5 https://codecov:${GITHUB_TOKEN}@github.com/codecov/autotest.git > /dev/null 2>&1
            cd autotest/
            echo "$DOCKERHUB_TOKEN" | docker login -u "$DOCKER_USERNAME" --password-stdin
            docker-compose -f docker-compose-acceptance.yml up -d > /dev/null 2>&1
            sleep 10
      - run:
          name: Standards Coverage Comparison
          command: make run-standards-comparison

workflows:
  version: 2

  'Build and Test':
    jobs:
      #       - standards-coverage-comparison:
      #           context:
      #             - 'DockerHub Push Context'
      #             - 'Github Checkout'
      #           requires:
      #             - build-alpine
      - build-linux
      - build-aarch64:
          requires:
            - build-linux
      - build-alpine:
          requires:
            - build-linux
      - test-alpine:
          requires:
            - build-alpine
      - test-alpine-proxy:
          requires:
            - build-alpine
      - test-alpine-without-git:
          requires:
            - test-alpine
      - build-windows:
          requires:
            - build-linux
      - test-aarch64:
          requires:
            - build-aarch64
      - test-aarch64-without-git:
          requires:
            - test-aarch64
      - test-linux:
          requires:
            - build-linux
      - test-linux-without-git:
          requires:
            - test-linux
      - build-macos:
          requires:
            - build-linux
      - test-macos:
          requires:
            - build-macos
      - test-macos-without-git:
          requires:
            - test-macos
      - test-windows:
          requires:
            - build-windows
      - test-windows-without-git:
          requires:
            - test-windows
      - review:
          requires:
            - test-alpine-proxy
            - test-alpine-without-git
            - test-linux-without-git
            - test-aarch64-without-git
            - test-macos-without-git
            - test-windows-without-git
      - deploy:
          requires:
            - review
          filters:
            branches:
              only: release
      - release:
          requires:
            - deploy
          filters:
            branches:
              only: release
